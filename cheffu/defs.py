import typing as typ

import cheffu.interfaces as chin
import cheffu.grammars as chgr
from cheffu.types.tokens import TokenTypeDef


TokenTypeDefs = (
    TokenTypeDef(
        interface=chin.Ingredient,
        keyword='INGR',
        arg_conv=chgr.String,
    ),
    TokenTypeDef(
        interface=chin.Tool,
        keyword='TOOL',
        arg_conv=chgr.String,
    ),
    TokenTypeDef(
        interface=chin.Container,
        keyword='CONT',
        arg_conv=chgr.String,
    ),
    TokenTypeDef(
        interface=chin.Appliance,
        keyword='APPL',
        arg_conv=chgr.String,
    ),
    TokenTypeDef(
        interface=chin.Environment,
        keyword='ENVR',
        arg_conv=chgr.String,
    ),
    TokenTypeDef(
        interface=chin.Verb,
        keyword='VERB',
        arg_conv=chgr.String,
    ),
    TokenTypeDef(
        interface=chin.Add,
        keyword='ADDI',
        arg_conv=None,
    ),
    TokenTypeDef(
        interface=chin.AddTo,
        keyword='ADDT',
        arg_conv=None,
    ),
    TokenTypeDef(
        interface=chin.Move,
        keyword='MOVE',
        arg_conv=None,
    ),
    TokenTypeDef(
        interface=chin.MoveFrom,
        keyword='MOVF',
        arg_conv=None,
    ),
    TokenTypeDef(
        interface=chin.Divide,
        keyword='DIVI',
        arg_conv=None,
    ),
    TokenTypeDef(
        interface=chin.Reserve,
        keyword='RESV',
        arg_conv=None,
    ),
    TokenTypeDef(
        interface=chin.Configure,
        keyword='CONF',
        arg_conv=chgr.String,
    ),
    TokenTypeDef(
        interface=chin.Meld,
        keyword='MELD',
        arg_conv=chgr.String,
    ),
    TokenTypeDef(
        interface=chin.Place,
        keyword='PLAC',
        arg_conv=None,
    ),
    TokenTypeDef(
        interface=chin.Remove,
        keyword='REMO',
        arg_conv=None,
    ),
    TokenTypeDef(
        interface=chin.With,
        keyword='WITH',
        arg_conv=None,
    ),
    TokenTypeDef(
        interface=chin.Using,
        keyword='USIN',
        arg_conv=chgr.String,
    ),
    TokenTypeDef(
        interface=chin.Discard,
        keyword='DISC',
        arg_conv=None,
    ),
    TokenTypeDef(
        interface=chin.Empty,
        keyword='EMPT',
        arg_conv=None,
    ),
    TokenTypeDef(
        interface=chin.Simultaneous,
        keyword='SIMU',
        arg_conv=None,
    ),
    TokenTypeDef(
        interface=chin.Precondition,
        keyword='PREC',
        arg_conv=chgr.String,
    ),
    TokenTypeDef(
        interface=chin.Modifier,
        keyword='MODI',
        arg_conv=chgr.String,
    ),
    TokenTypeDef(
        interface=chin.Annotation,
        keyword='ANNO',
        arg_conv=chgr.String,
    ),
    TokenTypeDef(
        interface=chin.Photo,
        keyword='PHOT',
        arg_conv=chgr.String,
    ),
    TokenTypeDef(
        interface=chin.LookupSet,
        keyword='LSET',
        arg_conv=chgr.String,
    ),
    TokenTypeDef(
        interface=chin.LookupGet,
        keyword='LGET',
        arg_conv=chgr.String,
    ),
    TokenTypeDef(
        interface=chin.Fraction,
        keyword='FRAC',
        arg_conv=chgr.Partition,
    ),
    TokenTypeDef(
        interface=chin.Pseudoselect,
        keyword='PSEU',
        arg_conv=chgr.String,
    ),
    TokenTypeDef(
        interface=chin.QuantityMass,
        keyword='QMAS',
        arg_conv=chgr.Quantity,
    ),
    TokenTypeDef(
        interface=chin.QuantityVolume,
        keyword='QVOL',
        arg_conv=chgr.Quantity,
    ),
    TokenTypeDef(
        interface=chin.QuantityCount,
        keyword='QCNT',
        arg_conv=chgr.Quantity,
    ),
    TokenTypeDef(
        interface=chin.Time,
        keyword='TIME',
        arg_conv=chgr.Time,
    ),
    TokenTypeDef(
        interface=chin.Until,
        keyword='UNTL',
        arg_conv=chgr.String,
    ),
)


TokenNameToDef = {k.name: k for k in TokenTypeDefs}
TokenKeywordToDef = {k.keyword: k for k in TokenTypeDefs}
